import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
	repositories {
		mavenCentral()
		//Needed only for SNAPSHOT versions
		//maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
	}
	dependencies {
		classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.2'
		classpath "org.openapitools:openapi-generator-gradle-plugin:7.2.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.3.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	// Test coverage
	id 'jacoco'

	// Code style
	id 'checkstyle'

	// PMD
	id 'pmd'

	// PITest
	id 'info.solidsoft.pitest' version '1.5.2'

	id 'org.openapi.generator' version '7.2.0'
}

group = 'nl.tudelft.sem.orders'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 15
targetCompatibility = 15

repositories {
	mavenCentral()
}

dependencies {

	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'io.springfox:springfox-swagger2:2.8.0'
	implementation 'io.springfox:springfox-swagger-ui:2.8.0'
	implementation 'io.swagger.core.v3:swagger-core:2.2.15'

	// deps for the openapi generation

	implementation 'com.squareup.okhttp3:okhttp:4.12.0'
	implementation 'com.google.code.gson:gson:2.10.1'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
	implementation 'io.gsonfire:gson-fire:1.9.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'


	// Local test database (in-memory)
	implementation 'com.h2database:h2'
	developmentOnly 'org.hibernate:hibernate-entitymanager'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
	testImplementation('org.assertj:assertj-core:3.23.1')

	implementation 'org.openapitools:jackson-databind-nullable:0.1.0'
}

test {
	useJUnitPlatform()
	jacoco {
		enabled = true
		includes = ['nl.tudelft.sem.orders.*']
		excludes = []
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.7" // Use the desired version of JaCoCo
}

jacocoTestCoverageVerification() {
	dependsOn test
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			includes = ['nl.tudelft.sem.orders.*']

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.0
			}
		}
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					// auto generated code
					'nl/tudelft/sem/delivery**',
					// auto generated code
					'nl/tudelft/sem/users**',
					// auto generated code
					'nl/tudelft/sem/orders/api**',
					// auto generated code
					'nl/tudelft/sem/orders/model**',
					// mocks which frequently change
					'nl/tudelft/sem/orders/adapters/mocks**',
					// testing the main fuction doesn't make sense
					'nl/tudelft/sem/orders/Application**',
					// testing the hibernate databse doesn't make sense since
					// its a external service
					'nl/tudelft/sem/orders/adapters/database/**'
			])
		}))
	}
}

apply plugin: 'org.openapi.generator'
tasks.register('ourGenerate', GenerateTask) {
	generatorName.set("spring")
	inputSpec.set("$rootDir/order-microservice/src/main/resources/openapi.yaml")
	outputDir.set("$buildDir/generated")
	apiPackage.set("nl.tudelft.sem.orders.api")
	modelPackage.set("nl.tudelft.sem.orders.model")
	configOptions.set([
			dateLibrary: "java15",
			// Exclude controller generation
			interfaceOnly: 'true'
	])
	skipOperationExample.set(true)
}

tasks.register('userGenerate', GenerateTask) {
	generatorName.set("java")
	inputSpec.set("$rootDir/order-microservice/src/main/resources/user.yaml")
	outputDir.set("$buildDir/generated")
	apiPackage.set("nl.tudelft.sem.users.api")
	modelPackage.set("nl.tudelft.sem.users.model")
	configOptions.set([
			dateLibrary: "java15",
			// Exclude controller generation
			interfaceOnly: 'true'
	])
	skipOperationExample.set(true)
}

tasks.register('deliveryGenerate', GenerateTask) {
	generatorName.set("java")
	inputSpec.set("$rootDir/order-microservice/src/main/resources/delivery.yaml")
	outputDir.set("$buildDir/generated")
	apiPackage.set("nl.tudelft.sem.delivery.api")
	modelPackage.set("nl.tudelft.sem.delivery.model")
	configOptions.set([
			dateLibrary: "java15",
			// Exclude controller generation
			interfaceOnly: 'true'
	])
	skipOperationExample.set(true)
}

compileJava.dependsOn tasks.named("ourGenerate")
compileJava.dependsOn tasks.named("userGenerate")
compileJava.dependsOn tasks.named("deliveryGenerate")

checkstyle {
	toolVersion "8.37"
	configFile = file("${rootDir}/config/checkstyle.xml")
	ignoreFailures = false
	maxErrors = 0
	maxWarnings = 0

}

checkstyleMain.source = "src/main/java"
checkstyleTest.source = "src/test/java"
pmdMain.source = "src/main/java"
pmdTest.source = "src/test/java"

pmd {
	incrementalAnalysis = true
	sourceSets = [project.sourceSets.main]
	ruleSets = []

	ruleSetConfig = resources.text.fromFile("${rootDir}/config/pmd.xml")
}

apply plugin: 'info.solidsoft.pitest'
pitest {
	//adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
	junit5PluginVersion = '0.12'

	targetClasses = ['nl.tudelft.sem.orders.*']  //by default "${project.group}.*"
	excludedClasses = [
					// auto generated code
					'nl.tudelft.sem.delivery.*',
					// auto generated code
					'nl.tudelft.sem.users.*',
					// auto generated code
					'nl.tudelft.sem.orders.api.*',
					// auto generated code
					'nl.tudelft.sem.orders.model.*',
					// mocks which frequently change
					'nl.tudelft.sem.orders.adapters.mocks.*',
					// testing the main fuction doesn't make sense
					'nl.tudelft.sem.orders.Application',
					// testing the spring/jpa config doesn't make sense
					'nl.tudelft.sem.orders.domain.config.*',
					// testing the hibernate databse doesn't make sense since
					// its a external service
					'nl.tudelft.sem.orders.adapters.database.*' ]

	pitestVersion = '1.5.1' //not needed when a default PIT version should be used
	threads = 4
	outputFormats = ['XML', 'HTML']
	timestampedReports = false
}

sourceSets {
	getByName("main") {
		java {
			srcDir("$buildDir/generated/src/main/java")
		}
	}
}
